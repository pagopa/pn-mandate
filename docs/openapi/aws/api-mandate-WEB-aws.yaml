openapi: 3.0.1
info:
  title: >-
    ${stageVariables.ProjectName}-${stageVariables.MicroServiceUniqueName}-${stageVariables.IntendedUsage}
  version: HQolOPdqR51J85akiQJNSM54DBq686fNW16Rl9MttLY=
servers:
  - url: https://${stageVariables.DnsName}/{basePath}
    variables:
      basePath:
        default: /${stageVariables.ServiceApiPath}
    x-amazon-apigateway-endpoint-configuration:
      disableExecuteApiEndpoint: true
paths:
  /api/v1/count-by-delegate:
    get:
      tags:
        - mandate-service
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      summary: >-
        Return total mandates based on required status if filter's specified. 
        If no filter is present, returns total of all pending and active
        mandates
      operationId: countMandatesByDelegate
      parameters:
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MandateCountsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/count-by-delegate
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /api/v1/count-by-delegate API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/count-by-delegate
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /api/v1/mandate:
    post:
      tags:
        - mandate-service
      summary: Create a new mandate, returns the just created mandate if successful
      operationId: createMandate
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MandateDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MandateDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: Options for /api/v1/mandate API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /api/v1/mandate/{mandateId}/accept:
    patch:
      tags:
        - mandate-service
      summary: Accept a mandate
      operationId: acceptMandate
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      parameters:
        - name: mandateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptRequestDto'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate/{mandateId}/accept
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.path.mandateId: method.request.path.mandateId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /api/v1/mandate/{mandateId}/accept API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate/{mandateId}/accept
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.mandateId: method.request.path.mandateId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /api/v1/mandate/{mandateId}/reject:
    patch:
      tags:
        - mandate-service
      summary: Reject a mandate
      operationId: rejectMandate
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      parameters:
        - name: mandateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate/{mandateId}/reject
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.path.mandateId: method.request.path.mandateId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /api/v1/mandate/{mandateId}/reject API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate/{mandateId}/reject
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.mandateId: method.request.path.mandateId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /api/v1/mandate/{mandateId}/revoke:
    patch:
      tags:
        - mandate-service
      summary: Revoke a mandate
      operationId: revokeMandate
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      parameters:
        - name: mandateId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate/{mandateId}/revoke
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
          integration.request.path.mandateId: method.request.path.mandateId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /api/v1/mandate/{mandateId}/revoke API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandate/{mandateId}/revoke
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.path.mandateId: method.request.path.mandateId
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /api/v1/mandates-by-delegate:
    get:
      tags:
        - mandate-service
      summary: >-
        Return filtered mandates based on required status if filter's specified.
        If no filter is present, returns all pending and active mandates
      operationId: listMandatesByDelegate_1
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      parameters:
        - $ref: '#/components/parameters/cxRoleAuthFleet'
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MandateDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandates-by-delegate
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
    options:
      operationId: Options for /api/v1/mandates-by-delegate API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandates-by-delegate
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
  /api/v1/mandates-by-delegator:
    get:
      tags:
        - mandate-service
      summary: Return all pending and active mandates
      operationId: listMandatesByDelegator_1
      security:
        - pn-auth-fleet_jwtAuthorizer_openapi: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MandateDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandates-by-delegator
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters:
          integration.request.header.x-pagopa-pn-cx-id: context.authorizer.cx_id
          integration.request.header.x-pagopa-pn-cx-role: context.authorizer.cx_role
          integration.request.header.x-pagopa-pn-uid: context.authorizer.uid
          integration.request.header.x-pagopa-pn-jti: context.authorizer.cx_jti
          integration.request.header.x-pagopa-pn-src-ch: '''WEB'''
          integration.request.header.x-pagopa-pn-cx-type: context.authorizer.cx_type
          integration.request.header.x-pagopa-pn-cx-groups: context.authorizer.cx_groups
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
      parameters: []
    options:
      operationId: Options for /api/v1/mandates-by-delegator API CORS
      x-amazon-apigateway-integration:
        uri: >-
          http://${stageVariables.ApplicationLoadBalancerDomain}:8080/${stageVariables.ServiceApiPath}/api/v1/mandates-by-delegator
        connectionId: ${stageVariables.NetworkLoadBalancerLink}
        httpMethod: ANY
        requestParameters: {}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        timeoutInMillis: 29000
        type: http_proxy
components:
  parameters:
    cxRoleAuthFleet:
      name: x-pagopa-pn-cx-role
      in: header
      description: Ruolo (estratto da token di Self Care)
      required: false
      schema:
        type: string
  schemas:
    MandateCountsDto:
      type: object
      properties:
        value:
          type: integer
          format: int32
    MandateDto:
      type: object
      properties:
        mandateId:
          type: string
          description: Available always, not required on mandate creation.
          nullable: true
        delegator:
          $ref: '#/components/schemas/UserDto'
        delegate:
          $ref: '#/components/schemas/UserDto'
        status:
          type: string
          description: Available always, not required on mandate creation.
          nullable: true
          enum:
            - pending
            - active
            - revoked
            - rejected
            - expired
        visibilityIds:
          type: array
          description: Available always, not required on mandate creation.
          nullable: true
          items:
            $ref: '#/components/schemas/OrganizationIdDto'
        verificationCode:
          type: string
          description: Available only for request where requesting user is the delegator
          nullable: true
        datefrom:
          type: string
          description: ISO 8601 format
        dateto:
          type: string
          description: ISO 8601 format
    OrganizationIdDto:
      type: object
      properties:
        name:
          type: string
        uniqueIdentifier:
          type: string
      description: Available always, not required on mandate creation.
      nullable: true
    UserDto:
      type: object
      properties:
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        companyName:
          type: string
        fiscalCode:
          type: string
        person:
          type: boolean
      description: Available only for request where requesting user is the delegator
      nullable: true
    AcceptRequestDto:
      type: object
      properties:
        verificationCode:
          type: string
        groups:
          type: array
          items:
            type: string
    MandateByDelegatorRequestDto:
      type: object
      required:
        - mandateId
        - delegatorId
      properties:
        mandateId:
          type: string
        delegatorId:
          type: string
    ProblemError:
      properties:
        code:
          description: Internal code of the error, in human-readable format
          example: >-
            PN_PARAMETER_TOO_LONG | PN_PARAMETER_TOO_SHORT | PN_DUPLICATE_ENTRY
            | etc...
          type: string
        element:
          description: Parameter or request body field name for validation error
          example: body.order.item[2].quantity
          type: string
        detail:
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Parameter not valid
          maxLength: 1024
          type: string
      required:
        - code
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          type: integer
          format: int32
          example: 503
          maximum: 600
          minimum: 100
          exclusiveMaximum: true
        title:
          description: >-
            A short, summary of the problem type. Written in english and
            readable
          example: Service Unavailable
          maxLength: 64
          pattern: ^[ -~]{0,64}$
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: ^.{0,4096}$
          type: string
        traceId:
          description: Internal support identifier associated to error
          example: 123e4567-e89b-12d3-a456-426614174000
          type: string
        timestamp:
          description: date and time referred to UTC
          example: '2022-07-27T12:22:33.444Z'
          type: string
          format: date-time
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      required:
        - status
        - errors
  responses: {}
  securitySchemes:
    pn-auth-fleet_jwtAuthorizer_openapi:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:pn-jwtAuthorizerLambda/invocations
        authorizerResultTtlInSeconds: 300
        type: token
tags:
  - null
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''

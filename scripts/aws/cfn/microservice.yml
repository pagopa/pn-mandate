AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

   #ApiDnsName:
   #  Type: String
   #  Description: 'The DNS name used for B2B rest API.'

  WebApiDnsName:
    Type: String
    Description: 'The DNS name used for WEB rest API.'
  
  CorsAllowedDomains:
    Type: String
    Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'

  MandatesDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing mandates'

  MandatesDynamoTableHistoryName:
    Type: String
    Description: 'Name of dynamodb table containing mandates history'

  MandatesDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing mandates'

  PnMandateInputsQueueURL:
    Type: String
    Description: pn-mandate_inputs queue URL

  MandatesDynamoTableHistoryArn:
    Type: String
    Description: 'ARN of dynamodb table containing mandates history'

  MandatesDynamoTableNameStreamArn:
    Type: String
    Description: ARN of dynamodb table containing stream mandates

  PnMandateExpiredTriggerDLQAlarmARN:
    Type: String
    Description: pn-mandate_expired_trigger_DLQ alarm ARN

  PnMandateInputsQueueAgeAlarmARN:
    Type: String
    Description: pn-mandate_inputs queue age ARN DLQ

  PnMandateExpiredTriggerDLQARN:
    Type: String
    Description: pn-mandate_expired_trigger_DLQ queue ARN

  PnMandateInputsQueueARN:
    Type: String
    Description: pn-mandate_inputs queue ARN

  PnMandateInputsQueueAlarmARN:
    Type: String
    Description: pn-mandate_inputs queue ARN DLQ

  PnMandateInputsQueueName:
    Type: String
    Description: pn-mandate_inputs queue name

  LogsKinesisSourceStreamArn:
    Type: String
    Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  AlbSecurityGroup:
    Type: String
    Description: 'Application load balancer security group'

  PnMandateExpiredTriggerLambdaEventSourceMappingBatchSize:
    Type: String
    Description: 'BatchSize stream mapping'

  PnMandateExpiredTriggerLambdaEventSourceMappingMaximumBatchingWindowInSeconds:
    Type: String
    Description: 'BatchWindow stream mapping'

  PnMandateExpiredTriggerLambdaEventSourceMappingMaximumRetryAttempts:
    Type: String
    Description: 'MaxRetry stream mapping'

  LogsKinesisFilterPattern:
    Type: String
    Default: ""
    Description: 'Log kinesis filter pattern'

Conditions:
    SendLogToKinesis: !Not [ !Equals [ !Ref LogsKinesisSourceStreamArn, '' ] ]

Resources:

  # PN-Mandate microservice
  MandateMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-mandate'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'CORS_ALLOWED_DOMAINS=${CorsAllowedDomains}'
        ContainerEnvEntry3: !Sub 'AWS_DYNAMODB_TABLE=${MandatesDynamoTableName}'
        ContainerEnvEntry4: !Sub 'AWS_DYNAMODB_TABLE_HISTORY=${MandatesDynamoTableHistoryName}'
        ContainerEnvEntry5: 'PN_MANDATE_CLIENT_DATAVAULT_BASEPATH=http://alb.confidential.pn.internal:8080'
        ContainerEnvEntry6: !Sub 'PN_MANDATE_CLIENT_INFOPA_BASEPATH=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry7: !Sub 'SPRING_CLOUD_FUNCTIONROUTER_QUEUES_LIST=${PnMandateInputsQueueName}'
        MappedPaths: '/mandate/*,/mandate-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        AlbSecurityGroup: !Ref AlbSecurityGroup
        TaskRoleManagedPolicyArn: !Ref MandateMicroserviceTaskManagedPolicy

  # Grant operational rights to PN-Mandate microservice
  MandateMicroserviceTaskManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
            Resource:
              - !Sub "${MandatesDynamoTableArn}"
              - !Sub "${MandatesDynamoTableArn}/*"
              - !Sub "${MandatesDynamoTableHistoryArn}"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:ChangeMessageVisibilityBatch
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Ref PnMandateInputsQueueARN

  # Expose PN-Mandate microservice public API with API-GW for WEB usage
  MandateMicroservicePublicWebAPI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-mandate'
        IntendedUsage: WEB
        DnsName: !Ref WebApiDnsName
        ProjectName: !Ref ProjectName
        ServiceApiPath: 'mandate'
        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
  MandateMicroservicePublicWebApiWaf:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-mandate-web'
        APIGatewayARNs: !GetAtt MandateMicroservicePublicWebAPI.Outputs.APIGatewayARN
        Limit: 3000

  MandateMicroserviceCloudWatchDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-mandate"
        DynamoDBTableNames: !Join 
          - ',' 
          - - !Ref MandatesDynamoTableName 
            - !Ref MandatesDynamoTableHistoryName
        RestApiStageArns: !Join
          - ','
          - - !GetAtt MandateMicroservicePublicWebAPI.Outputs.RestApiStageArn
        LambdaArns: !Join
          - ','
          - - !GetAtt PnMandateExpiredTriggerLambda.Arn
        RestApiNames: !Join
          - ','
          - - !GetAtt MandateMicroservicePublicWebAPI.Outputs.RestApiName
        AlarmArns: !Join
          - ','
          - - !GetAtt MandateMicroservice.Outputs.FatalLogsMetricAlarmArn
            - !GetAtt MandateMicroservicePublicWebAPI.Outputs.RestApiErrorAlarmArn
            - !GetAtt MandateMicroservicePublicWebAPI.Outputs.RestApiLatencyAlarmArn
            - !Ref PnMandateExpiredTriggerDLQAlarmARN
            - !Ref PnMandateInputsQueueAlarmARN
            - !Ref PnMandateInputsQueueAgeAlarmARN

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose
  SubscriptionFilterServiceRole:
    Type: AWS::IAM::Role
    Condition: SendLogToKinesis
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        -
          PolicyName: !Sub '${ProjectName}-mandate-lambda-logs-subscription-role'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                - "kms:Encrypt"
                - "kms:GenerateDataKey"
                - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  ### Subscription filters with Kinesis  https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - PnMandateExpiredTriggerLambdaLogGroup
    Condition: SendLogToKinesis
    Properties:
      RoleArn:
        Fn::GetAtt:
          - "SubscriptionFilterServiceRole"
          - "Arn"
      LogGroupName: !Sub "/aws/lambda/${PnMandateExpiredTriggerLambda}"
      FilterPattern: !Ref LogsKinesisFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  PnMandateExpiredTriggerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PnMandateExpiredTriggerLambda}"
      RetentionInDays: 14

  # Lambda function role
  PnMandateExpiredTriggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-PnMandateExpiredTriggerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${ProjectName}-PnMandateExpiredTriggerLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: WriteOnQueue
                Effect: Allow
                Action:
                  - sqs:ChangeMessageVisibility
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource:
                  - !Ref PnMandateInputsQueueARN
                  - !Ref PnMandateExpiredTriggerDLQARN
              - Sid: ReceiveDynamoStream
                Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource:
                  - !Ref MandatesDynamoTableNameStreamArn
              - Sid: CanWriteLogs
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  PnMandateExpiredTriggerLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref MandatesDynamoTableNameStreamArn
      StartingPosition: LATEST
      BatchSize: !Sub ${PnMandateExpiredTriggerLambdaEventSourceMappingBatchSize}
      MaximumBatchingWindowInSeconds: !Sub ${PnMandateExpiredTriggerLambdaEventSourceMappingMaximumBatchingWindowInSeconds}
      MaximumRetryAttempts: !Sub ${PnMandateExpiredTriggerLambdaEventSourceMappingMaximumRetryAttempts}
      FilterCriteria:
        Filters: [{"Pattern": "{\"userIdentity\":{\"type\":[\"Service\"],\"principalId\":[\"dynamodb.amazonaws.com\"]}}"}]
      FunctionName: !GetAtt PnMandateExpiredTriggerLambda.Arn
       # Add an OnFailure destination on the event source mapping
      DestinationConfig:
        OnFailure:
          Destination: !Ref PnMandateExpiredTriggerDLQARN



  PnMandateExpiredTriggerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Description: 'It triggers expired mandates for moving them to history'
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt PnMandateExpiredTriggerLambdaRole.Arn
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Environment:
        Variables:
          QUEUE_URL: !Ref PnMandateInputsQueueURL
      Code:
        ZipFile: |
              const AWS = require('aws-sdk')
              const sqs = new AWS.SQS();

              const QUEUE_URL = process.env.QUEUE_URL

              exports.handler = async (event) => {
                  console.log(JSON.stringify(event, null, 2));
                  console.log(QUEUE_URL);

                  for(var i = 0;i<event.Records.length;i++)
                  {
                      let record = event.Records[i];
                      if (record.eventName != 'REMOVE')
                        continue;

                      console.log('Processing dynamoDB Record: %j', record.dynamodb);
                      const sortkey = record.dynamodb.Keys.sk.S;

                      if (sortkey.match(/^MANDATETRIGGERHELPER#.*/)==null)
                        continue;

                      const delegatorInternalUserid = record.dynamodb.Keys.pk.S;
                      const mandateId = sortkey.replace("MANDATETRIGGERHELPER#","");

                      var message = {
                        DelaySeconds: 0,
                        MessageGroupId: 'MANDATE',
                        MessageDeduplicationId: sortkey + "_remove",
                        MessageAttributes: {
                          "createdAt": {
                            DataType: "String",
                            StringValue: new Date().toISOString()
                          },
                          "eventId": {
                            DataType: "String",
                            StringValue: sortkey + "_remove"
                          },
                          "eventType": {
                            DataType: "String",
                            StringValue: "MANDATE_EXPIRED"
                          },
                          "publisher": {
                            DataType: "String",
                            StringValue: "MANDATE"
                          }
                        },
                        MessageBody: JSON.stringify({delegatorInternalUserid: delegatorInternalUserid, mandateId: mandateId}),
                        QueueUrl: QUEUE_URL
                      };

                      console.log('Sending message: %j', message);
                      try{
                          let queueRes = await sqs.sendMessage(message).promise();
                          console.log("Sent message", queueRes.MessageId);
                      }catch(exc){
                          console.log("error sending message", exc)
                          throw exc;
                      }
                  }

                  const response = {
                      StatusCode: 200
                  };
                  return response;

              };
      #ENDpnmandateexpiredtrigger
      #Non rimuovere o modificare il commento sopra, è usato come placeholder negli script

